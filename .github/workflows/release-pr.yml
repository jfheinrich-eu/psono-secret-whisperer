name: Release PR Validation
permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [labeled, unlabeled, opened, edited, reopened, synchronize, ready_for_review]
    branches:
      - main

jobs:
  validate-release-pr:
    name: Validate Release Pull Request
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.ref == 'develop'
    defaults:
      run:
        shell: bash

    steps:
      - id: setup-secrets
        name: Setup secrets
        env:
          PSONO_CI_API_KEY_ID: ${{ secrets.PSONO_API_KEY_ID }}
          PSONO_CI_API_SECRET_KEY_HEX: ${{ secrets.PSONO_API_SECRET_KEY_HEX }}
          PSONO_CI_SERVER_URL: ${{ vars.PSONO_SERVER_URL }}
          PSONO_GITHUB_TOKEN_ID: ${{ secrets.PSONO_GITHUB_CLI_TOKEN }}
        run: |
          sudo apt update >/dev/null && sudo apt install -y curl >/dev/null
          curl https://get.psono.com/psono/psono-ci/x86_64-linux/psonoci --output psonoci >/dev/null && chmod +x psonoci
          ci_psono_registry_github_token="$(./psonoci secret get ${PSONO_GITHUB_TOKEN_ID} password)"
          echo "::add-mask::$ci_psono_registry_github_token"
          echo "ci_registry_github_token=$ci_psono_registry_github_token" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@v4

      - uses: jefflinse/pr-semver-bump@v1.7.3
        name: Validate Release Pull Request Metadata
        with:
          mode: validate
          repo-token: ${{ steps.setup-secrets.outputs.ci_registry_github_token }}
          major-label: major release
          minor-label: minor release
          patch-label: patch release
          noop-labels: |
            documentation change
            dependencies
            skip-release
          require-release-notes: true
          release-notes-prefix: '<!--- START AUTOGENERATED NOTES --->'
          release-notes-suffix: '<!--- END AUTOGENERATED NOTES --->'
          with-v: false
          base-branch: false

      - name: Check Release Label Required
        run: |
          if [[ ! "${{ contains(github.event.pull_request.labels.*.name, 'major release') }}" == "true" &&
                ! "${{ contains(github.event.pull_request.labels.*.name, 'minor release') }}" == "true" &&
                ! "${{ contains(github.event.pull_request.labels.*.name, 'patch release') }}" == "true" &&
                ! "${{ contains(github.event.pull_request.labels.*.name, 'skip release') }}" == "true" ]]; then
            echo "❌ ERROR: Release PR von develop → main muss eines der folgenden Labels haben:"
            echo "  • major release"
            echo "  • minor release"
            echo "  • patch release"
            echo "  • skip release"
            exit 1
          fi

          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'skip release') }}" == "true" ]]; then
            echo "✅ PR ist mit 'skip release' markiert - kein Release wird erstellt"
          else
            echo "✅ PR hat gültiges Release-Label - Release wird bei Merge erstellt"
          fi
